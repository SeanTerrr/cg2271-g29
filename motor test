#include "MKL25Z4.h"

// Define Motor Control Pins (GPIO Ports and Pins)
#define FR_MOTOR_PIN 1 // Front Right
#define FL_MOTOR_PIN 2 // Front Left
#define BR_MOTOR_PIN 3 // Back Right
#define BL_MOTOR_PIN 4 // Back Left

#define MOTOR_PORT PTD // Example Port D for all motors

void setupMotorPins() {
    SIM->SCGC5 |= SIM_SCGC5_PORTD_MASK; // Enable clock for Port D
    
    // Set all motor pins as GPIO outputs
    PORTD->PCR[FR_MOTOR_PIN] = PORT_PCR_MUX(1);
    PORTD->PCR[FL_MOTOR_PIN] = PORT_PCR_MUX(1);
    PORTD->PCR[BR_MOTOR_PIN] = PORT_PCR_MUX(1);
    PORTD->PCR[BL_MOTOR_PIN] = PORT_PCR_MUX(1);
    
    PTD->PDDR |= (1 << FR_MOTOR_PIN) | (1 << FL_MOTOR_PIN) | 
                 (1 << BR_MOTOR_PIN) | (1 << BL_MOTOR_PIN);
}

// Function to set motor directions
void moveForward() {
    PTD->PCOR = (1 << FR_MOTOR_PIN) | (1 << FL_MOTOR_PIN); // Front Motors CCW
    PTD->PSOR = (1 << BR_MOTOR_PIN) | (1 << BL_MOTOR_PIN); // Back Motors CW
}

void moveReverse() {
    PTD->PSOR = (1 << FR_MOTOR_PIN) | (1 << FL_MOTOR_PIN); // Front Motors CW
    PTD->PCOR = (1 << BR_MOTOR_PIN) | (1 << BL_MOTOR_PIN); // Back Motors CCW
}

void turnRightMoving() {
    PTD->PCOR = (1 << FR_MOTOR_PIN); // CCW
    PTD->PSOR = (1 << FL_MOTOR_PIN); // CCW + x (Faster)
    PTD->PSOR = (1 << BR_MOTOR_PIN); // CW
    PTD->PSOR = (1 << BL_MOTOR_PIN); // CW + x (Faster)
}

void turnLeftMoving() {
    PTD->PSOR = (1 << FR_MOTOR_PIN); // CCW + x (Faster)
    PTD->PCOR = (1 << FL_MOTOR_PIN); // CCW
    PTD->PSOR = (1 << BR_MOTOR_PIN); // CW + x (Faster)
    PTD->PCOR = (1 << BL_MOTOR_PIN); // CW
}

void turnRightOnSpot() {
    PTD->PCOR = (1 << FR_MOTOR_PIN); // CCW
    PTD->PSOR = (1 << FL_MOTOR_PIN); // CW
    PTD->PSOR = (1 << BR_MOTOR_PIN); // CW
    PTD->PCOR = (1 << BL_MOTOR_PIN); // CCW
}

void turnLeftOnSpot() {
    PTD->PSOR = (1 << FR_MOTOR_PIN); // CW
    PTD->PCOR = (1 << FL_MOTOR_PIN); // CCW
    PTD->PCOR = (1 << BR_MOTOR_PIN); // CCW
    PTD->PSOR = (1 << BL_MOTOR_PIN); // CW
}

void turnRightReverse() {
    PTD->PSOR = (1 << FR_MOTOR_PIN); // CW (Reversing)
    PTD->PCOR = (1 << FL_MOTOR_PIN); // CCW (Reversing + Slower for turning)
    PTD->PCOR = (1 << BR_MOTOR_PIN); // CCW (Reversing)
    PTD->PSOR = (1 << BL_MOTOR_PIN); // CW (Reversing + Faster for turning)
}

void turnLeftReverse() {
    PTD->PCOR = (1 << FR_MOTOR_PIN); // CCW (Reversing + Faster for Turning)
    PTD->PSOR = (1 << FL_MOTOR_PIN); // CW (Reversing)
    PTD->PSOR = (1 << BR_MOTOR_PIN); // CW (Reversing + Slower for Turning)
    PTD->PCOR = (1 << BL_MOTOR_PIN); // CCW (Reversing)
}


void stopMotors() {
    PTD->PCOR = (1 << FR_MOTOR_PIN) | (1 << FL_MOTOR_PIN) | 
                (1 << BR_MOTOR_PIN) | (1 << BL_MOTOR_PIN);
}





// code w PWM

#include "MKL25Z4.h"

#define FR_DIR_PIN 1  // Front Right Motor Direction
#define FL_DIR_PIN 2  // Front Left Motor Direction
#define BR_DIR_PIN 3  // Back Right Motor Direction
#define BL_DIR_PIN 4  // Back Left Motor Direction

#define FR_PWM_PIN 5  // Front Right Motor PWM
#define FL_PWM_PIN 6  // Front Left Motor PWM
#define BR_PWM_PIN 7  // Back Right Motor PWM
#define BL_PWM_PIN 8  // Back Left Motor PWM

#define MOTOR_PORT PTD // Motor Control Port

// Function to initialize PWM on TPM (Timer/PWM Module)
void initPWM() {
    SIM->SCGC5 |= SIM_SCGC5_PORTD_MASK; // Enable Port D clock
    SIM->SCGC6 |= SIM_SCGC6_TPM0_MASK;  // Enable TPM0 clock
    
    PORTD->PCR[FR_PWM_PIN] = PORT_PCR_MUX(4); // Set TPM0_CH5 for PWM
    PORTD->PCR[FL_PWM_PIN] = PORT_PCR_MUX(4); // Set TPM0_CH6 for PWM
    PORTD->PCR[BR_PWM_PIN] = PORT_PCR_MUX(4); // Set TPM0_CH7 for PWM
    PORTD->PCR[BL_PWM_PIN] = PORT_PCR_MUX(4); // Set TPM0_CH8 for PWM

    TPM0->SC = TPM_SC_PS(1) | TPM_SC_CMOD(1); // Prescaler & Enable TPM
    TPM0->MOD = 7500;  // Set max PWM value (adjust for speed control)

    TPM0->CONTROLS[5].CnSC = TPM_CnSC_MSB_MASK | TPM_CnSC_ELSA_MASK; // PWM Mode
    TPM0->CONTROLS[6].CnSC = TPM_CnSC_MSB_MASK | TPM_CnSC_ELSA_MASK; // PWM Mode
    TPM0->CONTROLS[7].CnSC = TPM_CnSC_MSB_MASK | TPM_CnSC_ELSA_MASK; // PWM Mode
    TPM0->CONTROLS[8].CnSC = TPM_CnSC_MSB_MASK | TPM_CnSC_ELSA_MASK; // PWM Mode
}

// Function to set motor speed (0 - 100)
void setMotorSpeed(int motor, int speed) {
    if (speed < 0) speed = 0; // Avoid negative values

    switch (motor) {
        case 1: TPM0->CONTROLS[5].CnV = (speed * 7500) / 100; break;
        case 2: TPM0->CONTROLS[6].CnV = (speed * 7500) / 100; break;
        case 3: TPM0->CONTROLS[7].CnV = (speed * 7500) / 100; break;
        case 4: TPM0->CONTROLS[8].CnV = (speed * 7500) / 100; break;
    }
}

// Function to control motor direction
void setMotorDirection(int motor, int direction) {
    switch (motor) {
        case 1: // Front Right Motor
            if (direction == 1) { PTD->PSOR = (1 << FR_DIR_PIN); } // CW
            else { PTD->PCOR = (1 << FR_DIR_PIN); } // CCW
            break;
        case 2: // Front Left Motor
            if (direction == 1) { PTD->PSOR = (1 << FL_DIR_PIN); }
            else { PTD->PCOR = (1 << FL_DIR_PIN); }
            break;
        case 3: // Back Right Motor
            if (direction == 1) { PTD->PSOR = (1 << BR_DIR_PIN); }
            else { PTD->PCOR = (1 << BR_DIR_PIN); }
            break;
        case 4: // Back Left Motor
            if (direction == 1) { PTD->PSOR = (1 << BL_DIR_PIN); }
            else { PTD->PCOR = (1 << BL_DIR_PIN); }
            break;
    }
}

// Move Forward Function
void moveForward(int speed) {
    setMotorDirection(1, 0); // Front Right CCW
    setMotorDirection(2, 0); // Front Left CCW
    setMotorDirection(3, 1); // Back Right CW
    setMotorDirection(4, 1); // Back Left CW
    
    setMotorSpeed(1, speed);
    setMotorSpeed(2, speed);
    setMotorSpeed(3, speed);
    setMotorSpeed(4, speed);
}

// Move Reverse Function
void moveReverse(int speed) {
    setMotorDirection(1, 1); // Front Right CW
    setMotorDirection(2, 1); // Front Left CW
    setMotorDirection(3, 0); // Back Right CCW
    setMotorDirection(4, 0); // Back Left CCW
    
    setMotorSpeed(1, speed);
    setMotorSpeed(2, speed);
    setMotorSpeed(3, speed);
    setMotorSpeed(4, speed);
}

// Turn Right Forward
void turnRightMoving(int speed, int x) {
    setMotorDirection(1, 0); // CCW
    setMotorDirection(2, 0); // CCW + x
    setMotorDirection(3, 1); // CW
    setMotorDirection(4, 1); // CW + x
    
    setMotorSpeed(1, speed);
    setMotorSpeed(2, speed + x);
    setMotorSpeed(3, speed);
    setMotorSpeed(4, speed + x);
}

// Turn Left Forward
void turnLeftMoving(int speed, int x) {
    setMotorDirection(1, 0); // CCW + x
    setMotorDirection(2, 0); // CCW
    setMotorDirection(3, 1); // CW + x
    setMotorDirection(4, 1); // CW
    
    setMotorSpeed(1, speed + x);
    setMotorSpeed(2, speed);
    setMotorSpeed(3, speed + x);
    setMotorSpeed(4, speed);
}

// Turn Right Reverse
void turnRightReverse(int speed, int x) {
    setMotorDirection(1, 1); // CW (Reversing, Slower)
    setMotorDirection(2, 1); // CW (Reversing, Faster)
    setMotorDirection(3, 0); // CCW (Reversing)
    setMotorDirection(4, 0); // CCW (Reversing, Faster)
    
    setMotorSpeed(1, speed);
    setMotorSpeed(2, speed + x);
    setMotorSpeed(3, speed);
    setMotorSpeed(4, speed + x);
}

// Turn right on the spot
void turnRightOnSpot(int speed) {
    setMotorDirection(1, 1); // Front Right CW
    setMotorDirection(2, 0); // Front Left CCW
    setMotorDirection(3, 1); // Back Right CW
    setMotorDirection(4, 0); // Back Left CCW
    
    setMotorSpeed(1, speed);
    setMotorSpeed(2, speed);
    setMotorSpeed(3, speed);
    setMotorSpeed(4, speed);
}

// Turn Left On the Spot
void turnLeftOnSpot(int speed) {
    setMotorDirection(1, 0); // Front Right CCW
    setMotorDirection(2, 1); // Front Left CW
    setMotorDirection(3, 0); // Back Right CCW
    setMotorDirection(4, 1); // Back Left CW
    
    setMotorSpeed(1, speed);
    setMotorSpeed(2, speed);
    setMotorSpeed(3, speed);
    setMotorSpeed(4, speed);
}

// Turn Left Reverse
void turnLeftReverse(int speed, int x) {
    setMotorDirection(1, 1); // CW (Reversing, Faster)
    setMotorDirection(2, 1); // CW (Reversing)
    setMotorDirection(3, 0); // CCW (Reversing, Slower)
    setMotorDirection(4, 0); // CCW (Reversing, Faster)
    
    setMotorSpeed(1, speed + x);
    setMotorSpeed(2, speed);
    setMotorSpeed(3, speed);
    setMotorSpeed(4, speed + x);
}

// Stop Motors
void stopMotors() {
    setMotorSpeed(1, 0);
    setMotorSpeed(2, 0);
    setMotorSpeed(3, 0);
    setMotorSpeed(4, 0);
}
